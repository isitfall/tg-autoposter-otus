import { Update, Start, Help, Command, On, Ctx, Sender } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { AuthService } from '../auth/auth.service';
import { User as TelegramUser } from 'telegraf/typings/core/types/typegram';



@Update()
@Injectable()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);

  constructor(
    private readonly usersService: UsersService,
    private readonly authService: AuthService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context, @Sender() telegramUser: TelegramUser) {
    try {
      if (!telegramUser) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      const telegramId = telegramUser.id.toString();
      const username = telegramUser.username;
      const firstName = telegramUser.first_name;
      const lastName = telegramUser.last_name;
      const languageCode = telegramUser.language_code;

      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
      const authResult = await this.authService.telegramAuth({
        telegramId,
        telegramUsername: username,
        telegramFirstName: firstName,
        telegramLastName: lastName,
        telegramLanguageCode: languageCode,
      });

      if (authResult.isNewUser) {
        await ctx.reply(
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!\n\n` +
          `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞!\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
          `‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å Telegram –∫–∞–Ω–∞–ª—ã\n` +
          `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n` +
          `‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.`,
          this.getMainKeyboard()
        );
      } else {
        await ctx.reply(
          `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}!\n\n` +
          `–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`,
          this.getMainKeyboard()
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.usersService.markAsActive(telegramId);

    } catch (error) {
      this.logger.error('Error in start command:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  @Help()
  async onHelp(@Ctx() ctx: Context) {
    const helpText = 
      `*Telegram Autoposter Bot*\n\n` +
      `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
      `/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
      `/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n` +
      `/channels - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n` +
      `*–§—É–Ω–∫—Ü–∏–∏:*\n` +
      `‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤\n` +
      `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n` +
      `*–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!`;

    await ctx.reply(helpText, {
      parse_mode: 'Markdown',
      ...this.getMainKeyboard()
    });
  }

  @Command('profile')
  async onProfile(@Ctx() ctx: Context, @Sender() telegramUser: TelegramUser) {
    try {
      if (!telegramUser) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      const telegramId = telegramUser.id.toString();
      const user = await this.usersService.findByTelegramId(telegramId);
      
      if (!user) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const profileText = 
        `*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
        `ID: \`${user.id}\`\n` +
        `–ò–º—è: ${user.telegramFirstName}${user.telegramLastName ? ' ' + user.telegramLastName : ''}\n` +
        `Username: ${user.telegramUsername ? '@' + user.telegramUsername : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–Ø–∑—ã–∫: ${user.telegramLanguageCode || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.createdAt.toLocaleDateString('ru-RU')}\n` +
        `–°—Ç–∞—Ç—É—Å: ${user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n` +
        `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
        `–ö–∞–Ω–∞–ª–æ–≤: ${user.channels?.length || 0}\n` +
        `–ü–æ—Å—Ç–æ–≤: ${user.posts?.length || 0}`;

      await ctx.reply(profileText, {
        parse_mode: 'Markdown',
        ...this.getMainKeyboard()
      });

    } catch (error) {
      this.logger.error('Error in profile command:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  @Command('channels')
  async onChannels(@Ctx() ctx: Context, @Sender() telegramUser: TelegramUser) {
    try {
      if (!telegramUser) {
        await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      const telegramId = telegramUser.id.toString();
      const user = await this.usersService.findByTelegramId(telegramId);
      
      if (!user) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      if (!user.channels || user.channels.length === 0) {
        await ctx.reply(
          `*–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã*\n\n` +
          `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n` +
          `–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n` +
          `1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞\n` +
          `2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel\n` +
          `3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º`,
          { 
            parse_mode: 'Markdown',
            ...this.getChannelsKeyboard()
          }
        );
        return;
      }

      let channelsText = `*–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã (${user.channels.length}):*\n\n`;
      
      user.channels.forEach((channel, index) => {
        channelsText += 
          `${index + 1}. **${channel.title}**\n` +
          `   @${channel.username || '–±–µ–∑ username'}\n` +
          `   ID: \`${channel.telegramId}\`\n` +
          `   –î–æ–±–∞–≤–ª–µ–Ω: ${channel.createdAt.toLocaleDateString('ru-RU')}\n\n`;
      });

      await ctx.reply(channelsText, {
        parse_mode: 'Markdown',
        ...this.getChannelsKeyboard()
      });

    } catch (error) {
      this.logger.error('Error in channels command:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
  @On('text')
  async onText(@Ctx() ctx: Context) {
    const text = ctx.text;
    
    switch (text) {
      case 'üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã':
        await this.onChannels(ctx, ctx.from as TelegramUser);
        break;
      case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        await this.onProfile(ctx, ctx.from as TelegramUser);
        break;
      case '‚ùì –ü–æ–º–æ—â—å':
        await this.onHelp(ctx);
        break;
      case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª':
        await ctx.reply('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
        break;
      case 'üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç':
        await ctx.reply('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
        break;
      case 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ':
        await ctx.reply('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
        break;
      case 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await ctx.reply(
          '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          this.getMainKeyboard()
        );
        break;
      default:
        await ctx.reply(
          `–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
          this.getMainKeyboard()
        );
    }
  }

  private getMainKeyboard() {
    return {
      reply_markup: {
        keyboard: [
          [{ text: 'üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã' }, { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' }],
          [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç' }, { text: 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' }],
          [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }, { text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };
  }

  private getChannelsKeyboard() {
    return {
      reply_markup: {
        keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }, { text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };
  }
}
